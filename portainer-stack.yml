version: '3.2'

services:
  agent:
    image: 'portainer/agent:2.20.0-alpine@sha256:cb31798105b5ceaadcd67c0db0c75ab8246f0942df07c6ffa070997d345f21c4'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - '/var/lib/docker/volumes:/var/lib/docker/volumes'
    networks:
      - 'portainer_agents'
    deploy:
      mode: 'global'
      placement:
        constraints: [node.platform.os == linux]

  portainer:
    deploy:
      mode: 'replicated'
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
        - 'traefik.enable=true'
        - 'traefik.http.routers.my-portainer-router.tls=true'
        - 'traefik.http.routers.my-portainer-router.rule=Host(`portainer.dark.florist`)'
        - 'traefik.http.routers.my-portainer-router.service=my-portainer-service'
        - 'traefik.http.services.my-portainer-service.loadbalancer.server.port=9000'
    image: 'portainer/portainer-ce:2.20.0@sha256:6719feba5c8098ee958795190a30e8d5210c00c2917aaa7a5793800054d8c2c0'
    command: '-H tcp://tasks.agent:9001 --tlsskipverify'
    # uncomment these initially so you can connect to localhost:9000 via SSH tunnel, and then comment them back out once traefik is up and running
    # this lets us use Portainer to deploy Traefik, but then use Traefik to access portainer with proper end to end TLS termination once things are up
    #ports:
    #  - '9443:9443'
    #  - '9000:9000'
    #  - '8000:8000'
    volumes:
      - 'portainer_data:/data'
    networks:
      - 'portainer_agents'
      - 'traefik'

networks:
  portainer_agents:
    driver: 'overlay'
    attachable: true
  traefik:
    external: true

volumes:
  portainer_data:
